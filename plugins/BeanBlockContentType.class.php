<?php
/**
 * @file
 * Focus on Block Plugin
 */

class BeanBlockContentType extends BeanPlugin {

  /*
   * Decalare default bloc setting
   */
  public function values() {
    $custom_setting_value = array (
      'settings' => array(
        'node_view_mode' => FALSE,
        'records_shown' => FALSE,
        'cache_duration' => '30',
      ),
      'more_link' => array(
        'text' => '',
        'path' => '',
      ),
      'content_type' => array(
        'type' => '',
      ),
    );
    return array_merge(parent::values(), $custom_setting_value); // TODO: Change the autogenerated stub
  }

  /*
   * Building extra setting for edit form
   */
  public function form($bean, $form, &$form_state) {
    $form = array();
    $form['settings'] = array(
      '#type' => 'fieldset',
      '#tree' => 1,
      '#title' => t('Output Form'),
    );
    $list_of_content_type = array();
    $types = node_type_get_types();
    foreach ($types as $type ) {
      $list_of_content_type[$type->name] = $type->name;
    }
    $node_view_mode = array();
    $entity_info =  entity_get_info();
    foreach ($entity_info['node']['view modes'] as $key => $value){
      $node_view_mode[$key] = $value['label'];
    }
    if(!isset($bean->settings['node_view_mode'])){
      $default_node_view_mode = 'full';
    }
    else{
      $default_node_view_mode = $bean->settings['node_view_mode'];
    }
    if(!$records_shown = $bean->settings['records_shown']){
      $records_shown = 5;
    }

    //create the form value
    $form['settings']['node_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('Select View Mode'),
      '#options' => $node_view_mode,
      '#default_value' => $default_node_view_mode,
      '#required' => TRUE,
      '#multiple' => FALSE,
    );

    $form['settings']['records_shown'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter the node to render'),
      '#size' => 5,
      '#default_value' => $records_shown,
    );
    $form['settings']['cache_duration'] = array(
      '#type' => 'textfield',
      '#title' => t('Cache Duration in Minutes'),
      '#size' => 5,
      '#default_value' => $bean->settings['cache_duration'],
      '#required' => TRUE,
    );
    $form['content_type'] = array(
      '#type'  => 'fieldset',
      '#tree' => 1,
      '#title' => t('select the Content type'),
    );
    $form['content_type']['type'] = array(
      '#type' => 'select',
      '#title' => t('Select the content type to display'),
      '#options' => $list_of_content_type,
      '#default_value' => $bean->content_type['type'],
      '#required' => TRUE,
      '#multiple' => TRUE,
    );
    $form['more_link'] = array(
      '#type' => 'fieldset',
      '#tree' => 1,
      '#title' => t('Add link to the bottom'),
    );
    $form['more_link']['select'] = array(
      '#type' => 'checkbox',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
      '#title' => 'Check to enable the Bottom Text & Link',
      '#states' => array(
        'checked' => array(
          ':input[NAME="more_link[text]"]' => array('filled' => TRUE),
        ),
        'collapsed' => array(
          "input[id='edit-more-link-select']" => array("filled" => FALSE),
        ),
      ),
    );
    $form['more_link']['text'] = array(
      '#type' => 'textfield',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
      '#states' => array(
        'invisible' => array(
          ':input[id=edit-more-link-select]' => array("checked" => FALSE),
        ),
      ),
      '#title' => t('Text to Show at Bottom of the Block'),
      '#default_value' => $bean->more_link['text'],
    );
    $form['more_link']['path'] = array(
      '#type' => 'textfield',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
      '#title' => t('URL to link with the Above Text'),
      '#default_value' => $bean->more_link['path'],
      '#states' => array(
        'visible' => array(
         "input[id='edit-more-link-select']" => array("checked" => TRUE),
        ),
      ),
    );
    $form['#submit'][] = 'bean_custom_content_display_clear_cache';
    return array_merge(parent::values(),$form);
  }

  /**
   * @param $bean
   * @param $content
   * @param string $view_mode
   * @param null $langcode
   *
   * @return mixed
   * @throws \Exception
   */
  public function view($bean, $content, $view_mode = 'default', $langcode = NULL) {

    if($cache = cache_get('bean_custom_content_display')){
      $results =  $cache->data;
    }
    else {
      $query = new EntityFieldQuery();
      $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bean->content_type['type'])
        ->propertyCondition('status', 1)
        ->propertyOrderBy('created', 'DESC')
        ->range(0, $bean->settings['records_shown']);
      $results = $query->execute();
      cache_set('bean_custom_content_display',$results,'cache',time()+60* $bean->settings['cache_duration']);
    }
    if(empty($results)){
      $content['node'] = array();
    }
    else{
      foreach ($results['node'] as $node){
        $node = node_load($node->nid, $node->vid);
        $content['nodes'][$node->nid] = node_view($node,$bean->settings['node_view_mode']);
      }
    }
    $content['more_link']['#markup'] = theme('BeanBlockMoreLink', array('text'=>$bean->more_link['text'],
                                                                            'path'=>$bean->more_link['path']));
    return $content;
  }
}

